% Define Parameters
fs = 48000;           % Sampling rate
T_total = 0.01;       % Total duration (in seconds)
m = T_total * fs;     % Total number of samples
n1 = round(m / 2);    % Define period T1 (half of total duration)
n2 = m - n1;          % Define period T2 (remaining duration)
k = 0.01;             % Decay constant for burst synthesis

% Generate random noise burst with raised cosine window
win = [ones(1, n1), (1 + cos(pi * (1:n2) / n2)) / 2, zeros(1, m - (n1 + n2))];
burst = (rand(1, m) + rand(1, m) - 1) .* win;

% Compute the FFT of the burst
Burst_f = fft(burst);

% Minimum-phase calculation using Hilbert transform and logarithmic magnitude
Bmin_f = exp(conj(hilbert(log(abs(Burst_f)))));

% Calculate the TDI using minimum phase
TDI_minimum = real(ifft(Burst_f ./ abs(Burst_f)));
TDI_minimum = TDI_minimum / max(abs(TDI_minimum));  % Normalize TDI

% Plot the windowed noise burst
t = (0:(m - 1)) / fs;  % Time vector
figure;
subplot(3, 1, 1);
plot(t, burst);
title('Weighted Noise Burst with Raised Cosine Window');
xlabel('Time (s)');
ylabel('Amplitude');

% Plot the TDI in the time domain
subplot(3, 1, 2);
plot(t, TDI_minimum);
title('Minimum-Phase TDI');
xlabel('Time (s)');
ylabel('Amplitude');

% Plot the frequency response of the TDI
NFFT = length(TDI_minimum);
f = fs / 2 * linspace(0, 1, NFFT / 2 + 1);
TDI_minimum_fft = fft(TDI_minimum, NFFT);
subplot(3, 1, 3);
plot(f, 20 * log10(abs(TDI_minimum_fft(1:NFFT / 2 + 1))), 'b', 'LineWidth', 1.5);
title('Frequency Response of Minimum-Phase TDI');
xlabel('Frequency (Hz)');
ylabel('Magnitude (dB)');

% Equalize the TDI to remove phase distortion
dmln = zeros(1, m / 2);  % Initialize the impulse
for p = 1:m / 2
    phi = pi * (rand(1) - 0.5);  % Random phase
    dmlx = cos(phi + 2 * p * pi * (1:m) / m) .* exp(- (k * p) * (1:m) / m); 
dmln = dmln + dmlx / std(dmlx);
end

% Perform FFT on the impulse and apply minimum-phase equalization
dmfn = fft(dmln);
dmfm = dmfn ./ exp(conj(hilbert(log(abs(dmfn)))));
dmle = real(ifft(dmfm));

% Normalize the final TDI
dmln = dmln / max(abs(dmln));
dmle = dmle / max(abs(dmle));

% Plot the equalized TDI in the time domain
figure;
plot(t, dmle);
title('Equalized TDI');
xlabel('Time (s)');
ylabel('Amplitude');

% Save the final TDI as a WAV file
audiowrite('TDI_equalized.wav', dmle, fs);
